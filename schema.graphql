type User @entity {
  id: ID!
  userAddress: String! @index
  communityMemberships: [CommunityMember!]! @derivedFrom(field: "user")
  badges: [UserBadge!]! @derivedFrom(field: "user")
}

type Community @entity {
  id: ID!
  communityAddress: String! @index
  factoryAddress: String @index
  name: String!
  description: String
  icon: String
  creatorAddress: String! @index
  isHidden: Boolean!
  blocktimestamp: BigInt!
  totalBadges: Int!
  lastIndexedAt: BigInt!
  members: [CommunityMember!]! @derivedFrom(field: "community")
  badges: [Badge!]! @derivedFrom(field: "community")
}

type CommunityMember @entity {
  id: ID!
  userAddress: String! @index
  isManager: Boolean! @index  # Com Ã­ndice para consultas eficientes
  isCreator: Boolean!
  communityAddress: String! @index
  lastIndexedAt: BigInt!
  points: Int!
  user: User! @index
  community: Community! @index
}

type Badge @entity {
  id: ID!
  issuer: String! @index
  communityAddress: String! @index
  name: String! @index
  score: Int!
  type: String! @index
  createdAt: BigInt
  removedAt: BigInt
  community: Community! @index
  userBadges: [UserBadge!]! @derivedFrom(field: "badge")
}

type UserBadge @entity {
  id: ID!
  userAddress: String! @index
  issuer: String! @index
  communityAddress: String! @index
  name: String! @index
  createdAt: BigInt
  user: User! @index
  badge: Badge! @index
  community: Community! @index
  communityMember: CommunityMember! @index
}